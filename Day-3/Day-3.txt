Q21. Create a singly linked list. 
Group all the nodes with odd indices together followed by the nodes with even indices, 
and return the reordered list.
The first node is considered odd, and the second node is even, and so on.
Note that the relative order inside both the even and odd groups should remain as 
it was in the input.
Expamples:
Input:  1->2->3->4->5
Output: 1->3->5->2->4
Input: 2->1->3->5->6->4->7
Output: 2->3->6->7->1->5->4



Q22. Create a singly linked list. 
Swap every two adjacent nodes and return the reordered list.
  Expamples:
  Input: 1->2->3->4
  Output: 2->1->4->3
  Input:  1
  Output: 1



Q23. Create a singly linked-list. The list can be represented as:
  L0 -> L1 -> … → Ln - 1 -> Ln
  Reorder the list to be in the following form:
  L0 -> Ln -> L1 → Ln - 1 -> L2 -> Ln - 2 -> …
  You can not modify the values in the list's nodes. 
  Only nodes themselves can be changed.
  Expamples:
  Input: 1->2->3->4
  Output: 1->4->2->3
  Input: 1->2->3->4->5
  Output: 1->5->2->4->3




Q24. Suppose an image can be represented as a 2D array of 0s and 1s. 
Write a function to reverse an image. Replace the 0s with 1s and vice versa.

  Examples
    ([
      [1, 0, 0],
      [0, 1, 0],
      [0, 0, 1]
    ]) ➞ [
      [0, 1, 1],
      [1, 0, 1],
      [1, 1, 0]
    ]

    ([
      [1, 1, 1],
      [0, 0, 0]
    ]) ➞ [
      [0, 0, 0],
      [1, 1, 1]
    ]

    ([
      [1, 0, 0],
      [1, 0, 0]
    ]) ➞ [
      [0, 1, 1],
      [0, 1, 1]
    ]




Q25. An isogram is a word that has no duplicate letters. 
Write a program that takes a string and returns either true or false 
depending on whether or not it's an "isogram".

  Examples
    ("Algorism") ➞ true

    ("PasSword") ➞ false
    // Not case sensitive.

    ("Consecutive") ➞ false
  
  Notes
    Ignore letter case (should not be case sensitive).
    All test cases contain valid one word strings.





Q26. A repdigit is a positive number composed out of the same digit. 
Write a program that takes an integer and returns whether it's a repdigit or not.

  Examples
    (66) ➞ true

    (0) ➞ true

    (-11) ➞ false

  Notes
    The number 0 should return true (even though it's not a positive number).
    Check the Resources tab for more info on repdigits.


Q27. Write a program that takes two numbers as arguments (num, length) and 
returns an array of multiples of num until the array length reaches length.

  Examples
    arrayOfMultiples(7, 5) ➞ [7, 14, 21, 28, 35]

    arrayOfMultiples(12, 10) ➞ [12, 24, 36, 48, 60, 72, 84, 96, 108, 120]

    arrayOfMultiples(17, 6) ➞ [17, 34, 51, 68, 85, 102]
  
  Notes
    Notice that num is also included in the returned array.



Q28. Parity bits are used as a very simple checksum to ensure that 
binary data isn't corrupted during transit. Here's how they work:

  If a binary string has an odd number of 1's, the parity bit is a 1.
  If a binary string has an even number of 1's, the parity bit is a 0.
  The parity bit is appended to the end of the binary string.
  Write a program that adds the correct parity bit to a binary string.

  Examples
    ("1011011") ➞ "10110111"
    // There are five 1's.
    // Since five is odd, the parity bit should be a 1.
    // Add the parity bit to the end of the string.
    // Return the result.

    ("0110000") ➞ "01100000"

    ("0101101") ➞ "01011010"

    ("1111111") ➞ "11111111"
  Notes
    All inputs will be 7-bits long (so that the parity bit makes it a full byte).


Q29. Write a program that squares every digit of a number.

  Examples
    (9119) ➞ 811181

    (2483) ➞ 416649

    (3212) ➞ 9414
  Notes
    The function receives an integer and must return an integer.


  
Q30. Write a program that returns the mean of all digits.
  Examples
    (42) ➞ 3

    (12345) ➞ 3

    (666) ➞ 6
  
  Notes
    The mean of all digits is the sum of digits / how many digits there are 
    (e.g. mean of digits in 512 is (5+1+2)/3(number of digits) = 8/3=2).
    The mean will always be an integer.